package com.cgpm.api.controllers;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cgpm.api.model.dto.MembroDTO;
import com.cgpm.api.model.entities.Membro;
import com.cgpm.api.model.entities.Projeto;
import com.cgpm.api.services.MembroService;

/**
 * @author michel.pech
 */

@RestController
@RequestMapping("/api/membro")
public class MembroController {
	
	@Autowired
	private MembroService service;

	@Autowired
	private ModelMapper modelMapper;

	@GetMapping
	public ResponseEntity<List<MembroDTO>> findAll() {
		List<Membro> entities = service.findAll();
		List<MembroDTO> dtos = entities.stream().map(entity -> modelMapper.map(entity, MembroDTO.class)).collect(Collectors.toList());		
		return ResponseEntity.ok().body(dtos);
	}

	@GetMapping("/{id}")
	public ResponseEntity<MembroDTO> findById(@PathVariable Projeto id) {
		Optional<Membro> entity = service.findById(id);
		if (entity.isPresent()) {
			MembroDTO dto = modelMapper.map(entity.get(), MembroDTO.class);
			return ResponseEntity.ok().body(dto);
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	@PostMapping
	public ResponseEntity<MembroDTO> insert(@RequestBody MembroDTO dto) {
		Membro entity = modelMapper.map(dto, Membro.class);
		Membro savedEntity = service.insert(entity);
		MembroDTO savedDto = modelMapper.map(savedEntity, MembroDTO.class);
		return ResponseEntity.ok().body(savedDto);
	}

	@PutMapping
	public ResponseEntity<MembroDTO> update(@RequestBody MembroDTO dto) {
		Membro entity = modelMapper.map(dto, Membro.class);
		Membro updatedEntity = service.update(entity);
		MembroDTO updatedDto = modelMapper.map(updatedEntity, MembroDTO.class);
		return ResponseEntity.ok().body(updatedDto);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteById(@PathVariable Projeto id) {
		service.deleteById(id);
		return new ResponseEntity<>("Registro removido com sucesso!", HttpStatus.OK);
	}	
	
}

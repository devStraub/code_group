package com.cgpm.api.base;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.cgpm.api.base.util.ModelMapperUtil;
import com.cgpm.api.base.util.PersistenceInterface;

/**
 * @author michel.pech
 */

@RestController
public abstract class BaseController<T extends PersistenceInterface<ID>, ID, DTO> {

	@Autowired
	private BaseService<T, ID> service;
	
    private final ModelMapperUtil<T, DTO> modelMapper;

    public BaseController(ModelMapperUtil<T, DTO> modelMapper) {
        this.modelMapper = modelMapper;
    }

	@GetMapping
	public ResponseEntity<List<DTO>> findAll() {
		List<T> entities = service.findAll();
		List<DTO> dtos = entities.stream().map(entity -> modelMapper.entityToDTO(entity)).collect(Collectors.toList());		
		return ResponseEntity.ok().body(dtos);
	}

	@GetMapping("/{id}")
	public ResponseEntity<DTO> findById(@PathVariable ID id) {
		Optional<T> entity = service.findById(id);
		if (entity.isPresent()) {
			DTO dto = modelMapper.entityToDTO(entity.get());
			return ResponseEntity.ok().body(dto);
		} else {
			return ResponseEntity.notFound().build();
		}
	}

	@PostMapping
	public ResponseEntity<DTO> insert(@RequestBody DTO dto) {
		T entity = modelMapper.dtoToEntity(dto);
		T savedEntity = service.insert(entity);
		DTO savedDto = modelMapper.entityToDTO(savedEntity);
		return ResponseEntity.ok().body(savedDto);
	}

	@PutMapping
	public ResponseEntity<DTO> update(@RequestBody DTO dto) {
		T entity = modelMapper.dtoToEntity(dto);
		T updatedEntity = service.update(entity);
		DTO updatedDto = modelMapper.entityToDTO(updatedEntity);
		return ResponseEntity.ok().body(updatedDto);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<String> deleteById(@PathVariable ID id) {
		service.deleteById(id);
		return new ResponseEntity<>("Registro removido com sucesso!", HttpStatus.OK);
	}

}
